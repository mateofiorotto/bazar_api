package com.mateo.bazar_api.controller;

import com.mateo.bazar_api.dto.VentaEditDTO;
import com.mateo.bazar_api.dto.VentaGetDTO;
import com.mateo.bazar_api.dto.VentaSaveDTO;
import com.mateo.bazar_api.service.IVentaService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Controlador REST que gestiona las operaciones CRUD sobre las ventas
 */
@RestController
public class VentaController {

    private final IVentaService ventaService;

    /*
    * Inyeccion de dependencias por constructor
    * */
    public VentaController(IVentaService ventaService) {
        this.ventaService = ventaService;
    }

    /**
     * Obtiene una lista de todas las ventas
     *
     * @return lista de ventas o mensaje que la lista esta vacia
     */
    @GetMapping("/ventas")
    @Operation(summary = "Obtener todas las ventas", description = "Devuelve una lista con todas las ventas registradas")
    @ApiResponse(responseCode = "200", description = "Ventas encontradas exitosamente")
    public ResponseEntity<?> getVentas() {
        List<VentaGetDTO> listaVentas = ventaService.getVentas();

        if (listaVentas.isEmpty()) {
            return ResponseEntity.ok("Lista vacia");
        }

        return ResponseEntity.ok(listaVentas);
    }

    /**
     * Busca un venta por su ID
     *
     * @param id_venta ID de la venta a buscar
     * @return venta correspondiente al ID
     */
    @GetMapping("ventas/{id_venta}")
    @Operation(summary = "Obtener venta por ID", description = "Devuelve una venta específica dada su ID")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Venta encontrada"),
            @ApiResponse(responseCode = "404", description = "Venta no encontrada")
    })
    public ResponseEntity<?> getVentaById(@PathVariable Long id_venta){
        VentaGetDTO venta = ventaService.getVentaById(id_venta);

        return ResponseEntity.ok(venta);
    }

    /**
     * Crea una nueva venta en la base de datos.
     *
     * @param venta DTO con los datos de la nueva venta
     * @return mensaje indicando que la venta fue creada
     */
    @PostMapping("/ventas/crear")
    @Operation(summary = "Crear una nueva venta", description = "Crea una nueva venta y la guarda en la base de datos")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Venta creada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Datos inválidos para crear la venta"),
            @ApiResponse(responseCode = "404", description = "El cliente no existe")
    })
    public ResponseEntity<?> saveVenta(@Valid @RequestBody VentaSaveDTO venta){
        ventaService.saveVenta(venta);
        return ResponseEntity.status(HttpStatus.CREATED).body("Venta creada");
    }

    /**
     * Edita un cliente existente.
     *
     * @param venta     DTO con los nuevos datos de la venta
     * @param id_venta  ID de la venta a editar
     * @return mensaje indicando que la venta fue editada
     */
    @PutMapping("/ventas/editar/{id_venta}")
    @Operation(summary = "Editar una venta", description = "Edita una venta existente en la base de datos")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Venta editada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Datos inválidos para editar la venta"),
            @ApiResponse(responseCode = "404", description = "Venta no encontrada")
    })
    //Con valid, se validara el parametro de la peticion
    public ResponseEntity<?> editVenta(@Valid @RequestBody VentaEditDTO venta, @PathVariable Long id_venta){
        ventaService.editVenta(venta, id_venta);
        return ResponseEntity.status(HttpStatus.OK).body("Venta editada");
    }

    /**
     * Elimina una venta del sistema.
     *
     * @param id_venta ID de la venta a eliminar
     * @return mensaje indicando que la venta fue eliminada
     */
    @DeleteMapping("/ventas/eliminar/{id_venta}")
    @Operation(summary = "Eliminar una venta", description = "Elimina una venta de la base de datos por su ID")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Venta eliminada exitosamente"),
            @ApiResponse(responseCode = "404", description = "Venta no encontrada")
    })
    public ResponseEntity<?> deleteVenta(@PathVariable Long id_venta){
        ventaService.deleteVenta(id_venta);
        return ResponseEntity.status(HttpStatus.OK).body("Venta eliminada");
    }
    
}
